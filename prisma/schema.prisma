// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image     String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoritesIds String[] @db.ObjectId

  //  some other relations with different models 

  accounts Account[] // one iuser can have many accounts
  listing Listing[] // one user can have many listings
  reservations Reservation[] // one user made many reservations
}

// user social logins i.e google, github, etc...
model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  type      String
  provider  String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@unique([provider, providerAccountId]) // each account is unique which means a user can only have one account per provider
}

// user listings
model Listing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  description String
  imageSrc     String
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue String
  userId    String  @db.ObjectId
  price Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // each listing belongs to a user
  reservations Reservation[] // each listing can have many reservations
}

// user reservations
model Reservation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  listingId    String  @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // each reservation belongs to a user
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade) // each reservation belongs to a listing
}
